#!/bin/bash

cd "$( dirname "${BASH_SOURCE[0]}" )/.."

. ./.env
. lib/util.sh

function createKeyStore() {
  file=$1

  if ! keytool -list $KEYTOOL_OPTS -alias ${KEYCLOAK_KEYSTORE_ALIAS} >/dev/null 2>/dev/null; then
    KEYTOOL_CREATE_OPTS="-genkeypair -alias ${KEYCLOAK_KEYSTORE_ALIAS} -keyalg EC -keysize 256 -sigalg SHA256withECDSA -storetype PKCS12 $KEYSTORE_CREATE_OPTS"
    if [ -n "${KEYCLOAK_KEY_DNAME}" ]; then
      KEYTOOL_CREATE_OPTS="$KEYTOOL_CREATE_OPTS -dname ${KEYCLOAK_KEY_DNAME}"
    fi
    echo "--> Generating keystore to hold EC keypair for JWT signing"
    keytool $KEYTOOL_CREATE_OPTS $KEYTOOL_OPTS
  else
    echo "--> ECDSA keypair for signing JWTs already exists. Not creating a new one."
  fi

  chmod 400 "$file"
}

function writeKeys() {
  FILE=$1
  RES=$2

  echo "--> Updating gateway signature keys"

  ensure_variable 'jwtKeystorePath: ' 'etc/gateway/gateway.yml' etc/gateway/gateway.yml
  ensure_variable 'jwtKeystoreAlias: ' $KEYCLOAK_KEYSTORE_ALIAS etc/gateway/gateway.yml
  ensure_variable 'jwtKeystorePassword: ' $KEYCLOAK_KEYSTORE_PASS etc/gateway/gateway.yml

  echo "jwtECPublicKeys:" >> "$FILE"


  ALIASES=($(keytool -list $KEYTOOL_OPTS | grep PrivateKeyEntry | sed -e 's/^\([^,]*\),.*$/\1/'))
  for (( i=0; i < ${#ALIASES[@]}; i++)); do
    ALIAS=${ALIASES[$i]}
    echo "  - |-" >> "$FILE"
    if keytool -export $KEYTOOL_OPTS -alias $ALIAS | openssl x509 -inform der -text | grep -q ecdsa-with-SHA256; then
      REPLACE_PUBKEY="EC PUBLIC KEY"
    else
      REPLACE_PUBKEY="PUBLIC KEY"
    fi

    cert="$(keytool -export $KEYTOOL_OPTS -alias $ALIAS | openssl x509 -inform der -pubkey -noout)"
    while IFS='' read -r line && [ -n "$line" ]; do
      line=$(sed "s/PUBLIC KEY/$REPLACE_PUBKEY/" <<< $line)
      echo "    $line" >> "$FILE"
    done <<< "$cert"
  done
}

keystorefile=etc/gateway/keystore.p12
ensure_env_password KEYCLOAK_KEYSTORE_PASS "Keycloak keystore pass is not set in .env."

export KEYTOOL_OPTS="-keystore ${keystorefile} -storepass ${KEYCLOAK_KEYSTORE_PASS} -keypass ${KEYCLOAK_KEYSTORE_PASS} $KEYSTORE_INIT_OPTS"

createKeyStore "$keystorefile"

writeKeys etc/gateway/gateway.yml

